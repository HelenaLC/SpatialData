% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PointFrame.R
\name{PointFrame}
\alias{PointFrame}
\alias{names,PointFrame-method}
\alias{dim,PointFrame-method}
\alias{length,PointFrame-method}
\alias{$,PointFrame-method}
\alias{[[,PointFrame,ANY,ANY-method}
\alias{[,PointFrame,numeric,ANY,ANY-method}
\alias{as.data.frame,PointFrame-method}
\title{The `PointFrame` class}
\usage{
PointFrame(data = data.frame(), meta = Zattrs(), metadata = list(), ...)

\S4method{names}{PointFrame}(x)

\S4method{dim}{PointFrame}(x)

\S4method{length}{PointFrame}(x)

\S4method{$}{PointFrame}(x, name)

\S4method{[[}{PointFrame,ANY,ANY}(x, i, j, ...)

\S4method{[}{PointFrame,numeric,ANY,ANY}(x, i, j, ..., drop = TRUE)

\S4method{as.data.frame}{PointFrame}(x)
}
\arguments{
\item{data}{\code{arrow}-derived table for on-disk,
\code{data.frame} for in-memory representation.}

\item{meta}{\code{\link{Zattrs}}}

\item{metadata}{optional list of arbitrary
content describing the overall object.}

\item{...}{optional arguments passed to and from other methods.}

\item{x, .data}{\code{PointFrame}}

\item{name}{character string for extraction (see \code{?base::`$`}).}

\item{i, j}{indices for subsetting (see \code{?base::Extract}).}

\item{drop}{ignored.}
}
\value{
\code{PointFrame}
}
\description{
The PointFrame (PF) class is defined to store points in `data.frame` format,
having associated `meta` attributes from the Zattr file, and additional
`metadata` stored as a list.
Defined methods for PointFrame are:
- names: returns the names of the elements in data inside the PF.
- dim: returns the dimensions of the data inside the PF.
- length: returns the number of rows of the data inside the PF.
- `$`: direct accessor for the columns in the PF data.
- `[[`: direct accessor for the data inside the PF.
- filter: subsets data PF rows based on specified conditions.
- as.data.frame: transforms data PF in a `data.frame`.
- select: subsets data PF colums based on specified conditions.
}
\examples{
tf <- tempfile()
dir.create(tf)
base <- unzip_merfish_demo(tf)
x <- file.path(base, "points", "single_molecule")
(p <- readPoint(x))

head(as.data.frame(data(p)))
(q <- dplyr::filter(p, cell_type == "VISp_wm"))
plotPoint(q, c="x", s=0.2)

}
